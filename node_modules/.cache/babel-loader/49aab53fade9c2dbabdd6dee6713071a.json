{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\src\\\\views\\\\import-repo\\\\import-repo.jsx\";\nimport React from 'react';\nimport Pageadmin from 'layouts/page-admin';\nimport { Button, Input, Progress } from 'reactstrap';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumn';\nimport app from 'app';\n\nvar Importrepo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Importrepo, _React$Component);\n\n  function Importrepo() {\n    var _this;\n\n    _classCallCheck(this, Importrepo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Importrepo).call(this));\n\n    _this.Click = function () {\n      var id = document.getElementById('file');\n      id.click();\n    };\n\n    _this.sleep = function (ms) {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    };\n\n    _this.Simpan =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var data, count, progres, i, x, hasil;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = _this.state.data;\n              count = data.length;\n              progres = 0;\n              i = 0;\n\n            case 4:\n              if (!(i < count)) {\n                _context.next = 14;\n                break;\n              }\n\n              progres = progres + 1;\n              x = parseInt(progres / count * 100);\n              hasil = {\n                name: data[i].LAPORAN,\n                jenis: data[i].FREKUENSI,\n                ket: '',\n                user: 'TEST003',\n                divisi: data[i].IDDPT,\n                sbu: data[i].IDSBU,\n                nodoc: data[i].NODOC\n              };\n\n              _this.setState({\n                persen: x\n              });\n\n              _context.next = 11;\n              return sleep(2000);\n\n            case 11:\n              i++;\n              _context.next = 4;\n              break;\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleChange = function (e) {\n      var file = e.target.files[0];\n      /* Boilerplate to set up FileReader */\n\n      var reader = new FileReader();\n      var rABS = !!reader.readAsBinaryString;\n\n      reader.onload = function (e) {\n        /* Parse data */\n        var bstr = e.target.result;\n        var wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true\n        });\n        /* Get first worksheet */\n\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        var data = XLSX.utils.sheet_to_json(ws);\n        /* Update state */\n\n        _this.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, function () {\n          console.log(_this.state.data);\n        });\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n\n      ;\n    };\n\n    _this.Reset = function () {\n      _this.setState({\n        file: {},\n        data: [],\n        cols: [],\n        persen: 0\n      });\n\n      document.getElementById('file').value = '';\n    };\n\n    _this.state = {\n      file: {},\n      data: [],\n      cols: [],\n      persen: 0\n    };\n    return _this;\n  }\n\n  _createClass(Importrepo, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Pageadmin, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"file\",\n        hidden: true,\n        id: \"file\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        onClick: this.Click,\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Import Repo\"), React.createElement(Button, {\n        type: \"button\",\n        onClick: this.Simpan,\n        color: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Proses\"), React.createElement(Button, {\n        type: \"button\",\n        onClick: this.Reset,\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"div\", {\n        className: \"progress-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progress-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"progress-percentage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"\".concat(this.state.persen, \" %\")))), React.createElement(Progress, {\n        id: \"pg\",\n        max: \"100\",\n        value: this.state.persen,\n        color: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Importrepo;\n}(React.Component);\n\nexport default Importrepo;","map":{"version":3,"sources":["D:\\job\\web\\Midas\\Midas-Client\\src\\views\\import-repo\\import-repo.jsx"],"names":["React","Pageadmin","Button","Input","Progress","XLSX","make_cols","app","Importrepo","Click","id","document","getElementById","click","sleep","ms","Promise","resolve","setTimeout","Simpan","data","state","count","length","progres","i","x","parseInt","hasil","name","LAPORAN","jenis","FREKUENSI","ket","user","divisi","IDDPT","sbu","IDSBU","nodoc","NODOC","setState","persen","handleChange","e","file","target","files","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","cols","console","log","readAsArrayBuffer","Reset","value","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Pageadmin from 'layouts/page-admin';\r\nimport { Button , Input , Progress } from 'reactstrap';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumn';\r\nimport app from 'app';\r\n\r\n\r\nclass Importrepo extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: [],\r\n            persen: 0\r\n        }\r\n    }\r\n\r\n   \r\n    Click =()=>{\r\n        let id = document.getElementById('file');\r\n        id.click();\r\n    }\r\n\r\n     sleep =(ms) =>{\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n      }\r\n      \r\n    Simpan = async() =>{\r\n\r\n        let { data } = this.state;\r\n        let count  = data.length;\r\n        let progres = 0;\r\n\r\n        for(let i = 0; i < count; i++ ){\r\n\r\n            progres = progres + 1;\r\n            let x = parseInt((progres / count) * 100);\r\n\r\n            let  hasil = {\r\n                    name: data[i].LAPORAN,\r\n                    jenis: data[i].FREKUENSI,\r\n                    ket: '',\r\n                    user:'TEST003',\r\n                    divisi: data[i].IDDPT,\r\n                    sbu: data[i].IDSBU,\r\n                    nodoc: data[i].NODOC\r\n                }\r\n\r\n                this.setState({\r\n                    persen: x\r\n                })\r\n\r\n               await sleep(2000)\r\n                /*\r\n            app.apiPostJson('repository',hasil)\r\n            .then(res =>{\r\n                if (res) {\r\n                    this.setState({\r\n                        persen: x\r\n                    })\r\n                }\r\n            })\r\n*/\r\n        }\r\n    }\r\n\r\n    handleChange =(e)=> {\r\n        const file = e.target.files[0];\r\n        \r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n    \r\n        reader.onload = (e) => {\r\n        /* Parse data */\r\n        const bstr = e.target.result;\r\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\r\n        /* Get first worksheet */\r\n        const wsname = wb.SheetNames[0];\r\n        const ws = wb.Sheets[wsname];\r\n        /* Convert array of arrays */\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n        /* Update state */\r\n        this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n            console.log(this.state.data);\r\n        });\r\n    \r\n        };\r\n    \r\n        if (rABS) {\r\n        reader.readAsBinaryString(file);\r\n        } else {\r\n        reader.readAsArrayBuffer(file);\r\n        };\r\n    };\r\n\r\n    Reset = ()=>{\r\n        this.setState({\r\n            file:{},\r\n            data:[],\r\n            cols:[],\r\n            persen:0\r\n        })\r\n\r\n        document.getElementById('file').value='';\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Pageadmin>\r\n                <Input type='file' hidden id='file' onChange={this.handleChange}/>\r\n                <Button type='button' onClick={this.Click} color='success'>Import Repo</Button>\r\n                <Button type='button' onClick={this.Simpan}  color='info'>Proses</Button>\r\n                <Button type='button' onClick={this.Reset}  color='danger'>Reset</Button>\r\n                <div className=\"progress-wrapper\">\r\n                    <div className=\"progress-info\">\r\n                        <div className=\"progress-percentage\">\r\n                        <span>{`${this.state.persen} %`}</span>\r\n                        </div>\r\n                    </div>\r\n                    <Progress id='pg' max=\"100\" value={this.state.persen} color=\"default\" />\r\n                </div>\r\n            </Pageadmin>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Importrepo;"]},"metadata":{},"sourceType":"module"}