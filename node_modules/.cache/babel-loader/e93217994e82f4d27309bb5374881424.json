{"ast":null,"code":"'use strict';\n\nvar XLSX = require('xlsx');\n\nvar extend = require('node.extend');\n\nvar excelToJson = function () {\n  var _config = {};\n\n  var getCellRow = function getCellRow(cell) {\n    return Number(cell.replace(/[A-z]/gi, ''));\n  };\n\n  var getCellColumn = function getCellColumn(cell) {\n    return cell.replace(/[0-9]/g, '').toUpperCase();\n  };\n\n  var getRangeBegin = function getRangeBegin(cell) {\n    return cell.match(/^[^:]*/)[0];\n  };\n\n  var getRangeEnd = function getRangeEnd(cell) {\n    return cell.match(/[^:]*$/)[0];\n  };\n\n  function getSheetCellValue(sheetCell) {\n    if (sheetCell) {\n      return sheetCell.t === 'n' || sheetCell.t === 'd' ? sheetCell.v : sheetCell.w && sheetCell.w.trim && sheetCell.w.trim() || sheetCell.w;\n    }\n  }\n\n  ;\n\n  var parseSheet = function parseSheet(sheetData, workbook) {\n    var sheetName = sheetData.constructor == String ? sheetData : sheetData.name;\n    var sheet = workbook.Sheets[sheetName];\n    var columnToKey = sheetData.columnToKey || _config.columnToKey;\n    var range = sheetData.range || _config.range;\n    var headerRows = sheetData.header && sheetData.header.rows || _config.header && _config.header.rows;\n    var headerRowToKeys = sheetData.header && sheetData.header.rowToKeys || _config.header && _config.header.rowToKeys;\n    var strictRangeColumns;\n    var strictRangeRows;\n\n    if (range) {\n      strictRangeColumns = {\n        from: getCellColumn(getRangeBegin(range)),\n        to: getCellColumn(getRangeEnd(range))\n      };\n      strictRangeRows = {\n        from: getCellRow(getRangeBegin(range)),\n        to: getCellRow(getRangeEnd(range))\n      };\n    }\n\n    var rows = [];\n\n    var _loop = function _loop(cell) {\n      // !ref is not a data to be retrieved || this cell doesn't have a value\n      if (cell == '!ref' || sheet[cell].v === undefined) {\n        return \"continue\";\n      }\n\n      var row = getCellRow(cell);\n      var column = getCellColumn(cell); // Is a Header row\n\n      if (headerRows && row <= headerRows) {\n        return \"continue\";\n      } // This column is not _configured to be retrieved\n\n\n      if (columnToKey && !(columnToKey[column] || columnToKey['*'])) {\n        return \"continue\";\n      } // This cell is out of the _configured range\n\n\n      if (strictRangeColumns && strictRangeRows && (column < strictRangeColumns.from || column > strictRangeColumns.to || row < strictRangeRows.from || row > strictRangeRows.to)) {\n        return \"continue\";\n      }\n\n      var rowData = rows[row] = rows[row] || {};\n      var columnData = columnToKey && (columnToKey[column] || columnToKey['*']) ? columnToKey[column] || columnToKey['*'] : headerRowToKeys ? \"{{\".concat(column).concat(headerRowToKeys, \"}}\") : column;\n      var dataVariables = columnData.match(/{{([^}}]+)}}/g);\n\n      if (dataVariables) {\n        dataVariables.forEach(function (dataVariable) {\n          var dataVariableRef = dataVariable.replace(/[\\{\\}]*/gi, '');\n          var variableValue;\n\n          switch (dataVariableRef) {\n            case 'columnHeader':\n              dataVariableRef = headerRows ? \"\".concat(column).concat(headerRows) : \"\".concat(column + 1);\n\n            default:\n              variableValue = getSheetCellValue(sheet[dataVariableRef]);\n          }\n\n          columnData = columnData.replace(dataVariable, variableValue);\n        });\n      }\n\n      if (columnData === '') {\n        return \"continue\";\n      }\n\n      rowData[columnData] = getSheetCellValue(sheet[cell]);\n\n      if (sheetData.appendData) {\n        extend(true, rowData, sheetData.appendData);\n      }\n    };\n\n    for (var cell in sheet) {\n      var _ret = _loop(cell);\n\n      if (_ret === \"continue\") continue;\n    } // removing first row i.e. 0th rows because first cell itself starts from A1\n\n\n    rows.shift(); // Cleaning empty if required\n\n    if (!_config.includeEmptyLines) {\n      rows = rows.filter(function (v) {\n        return v !== null && v !== undefined;\n      });\n    }\n\n    return rows;\n  };\n\n  var convertExcelToJson = function convertExcelToJson() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var sourceFile = arguments.length > 1 ? arguments[1] : undefined;\n    _config = config.constructor === String ? JSON.parse(config) : config;\n    _config.sourceFile = _config.sourceFile || sourceFile; // ignoring empty lines by default\n\n    _config.includeEmptyLines = _config.includeEmptyLines || false; // at least sourceFile or source has to be defined and have a value\n\n    if (!(_config.sourceFile || _config.source)) {\n      throw new Error(':: \\'sourceFile\\' or \\'source\\' required for _config :: ');\n    }\n\n    var workbook = {};\n\n    if (_config.source) {\n      workbook = XLSX.read(_config.source, {\n        sheetStubs: true,\n        cellDates: true\n      });\n    } else {\n      workbook = XLSX.readFile(_config.sourceFile, {\n        sheetStubs: true,\n        cellDates: true\n      });\n    }\n\n    var sheetsToGet = _config.sheets && _config.sheets.constructor === Array ? _config.sheets : Object.keys(workbook.Sheets).slice(0, _config && _config.sheets && _config.sheets.numberOfSheetsToGet || undefined);\n    var parsedData = {};\n    sheetsToGet.forEach(function (sheet) {\n      sheet = sheet.constructor == String ? {\n        name: sheet\n      } : sheet;\n      parsedData[sheet.name] = parseSheet(sheet, workbook);\n    });\n    return parsedData;\n  };\n\n  return convertExcelToJson;\n}();\n\nmodule.exports = excelToJson;","map":null,"metadata":{},"sourceType":"script"}