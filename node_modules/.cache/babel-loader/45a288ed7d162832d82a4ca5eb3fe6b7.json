{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\src\\\\views\\\\format-file\\\\list-detail-format-file.jsx\";\nimport React from 'react';\nimport Baselistmmodal from 'layouts/list_modal.jsx';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Button, Badge } from 'reactstrap';\nimport download from 'downloadjs';\nimport Loading from 'layouts/loading-modal';\nimport Scroll from 'simplebar-react';\nimport app from 'app';\n\nvar detailformat =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(detailformat, _React$Component);\n\n  function detailformat(props) {\n    var _this;\n\n    _classCallCheck(this, detailformat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(detailformat).call(this, props));\n\n    _this.action = function (id) {\n      return React.createElement(React.Fragment, null, React.createElement(Button, {\n        type: \"button\",\n        size: \"sm\",\n        onClick: function onClick() {\n          return _this.Downloadfile(id);\n        },\n        outline: true,\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Download\"));\n    };\n\n    _this.mode = function () {\n      _this.setState({\n        modal: !_this.state.modal\n      });\n    };\n\n    _this.cekversion = function (id) {\n      if (id === 1) {\n        return React.createElement(Badge, {\n          color: \"success\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, \"File Terbaru\");\n      } else {\n        return React.createElement(Badge, {\n          color: \"danger\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"File Lama\");\n      }\n    };\n\n    _this.state = {\n      modal: false\n    };\n    return _this;\n  }\n\n  _createClass(detailformat, [{\n    key: \"Downloadfile\",\n    value: function () {\n      var _Downloadfile = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(id);\n                console.log(this.props.data);\n                /*let data = this.props.data.filter(res => res.ID_FORMAT === id)[0];\r\n                let idfile = data.ID_FORMAT;\r\n                let name = data.ORIGINAL_NAME;\r\n                 console.log(name);\r\n                       this.mode();\r\n                 let res = await fetch(app.proxy+'formatfile/download/'+idfile ,{\r\n                   method: 'get',\r\n                   headers: app.head2\r\n                });\r\n                 if (res) {\r\n                let blob = await res.blob();\r\n                      download(blob , name);\r\n                this.mode();\r\n                app.apiGet1('formatfile/delete',idfile)  \r\n                 }*/\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function Downloadfile(_x) {\n        return _Downloadfile.apply(this, arguments);\n      }\n\n      return Downloadfile;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var options = {\n        sizePerPage: 10,\n        hideSizePerPage: true,\n        prePage: 'Back',\n        nextPage: 'Next'\n      };\n      return React.createElement(Baselistmmodal, {\n        modal: this.props.modal,\n        mode: this.props.mode,\n        title: 'List Format Laporan',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content table-responsive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Loading, {\n        modal: this.state.modal,\n        text: 'Proses Download',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(Scroll, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(BootstrapTable, {\n        data: this.props.data,\n        bordered: false,\n        striped: true,\n        pagination: true,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"TANGGAL_UPLOAD\",\n        width: \"16%\",\n        isKey: true,\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Tanggal Upload\"), React.createElement(TableHeaderColumn, {\n        dataField: \"ORIGINAL_NAME\",\n        width: \"16%\",\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"File Name\"), React.createElement(TableHeaderColumn, {\n        dataField: \"ACTIVE\",\n        dataFormat: this.cekversion,\n        width: \"16%\",\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Status\"), React.createElement(TableHeaderColumn, {\n        dataField: \"ID_FILE\",\n        dataFormat: this.action,\n        width: \"16%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Action\"))))))));\n    }\n  }]);\n\n  return detailformat;\n}(React.Component);\n\nexport default detailformat;","map":{"version":3,"sources":["D:\\job\\web\\Midas\\Midas-Client\\src\\views\\format-file\\list-detail-format-file.jsx"],"names":["React","Baselistmmodal","BootstrapTable","TableHeaderColumn","Button","Badge","download","Loading","Scroll","app","detailformat","props","action","id","Downloadfile","mode","setState","modal","state","cekversion","console","log","data","options","sizePerPage","hideSizePerPage","prePage","nextPage","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAiD,uBAAjD;AACA,SAAQC,MAAR,EAAiBC,KAAjB,QAA6B,YAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,GAAP,MAAgB,KAAhB;;IAGMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,sFAAMA,KAAN;;AADc,UAOlBC,MAPkB,GAOV,UAACC,EAAD,EAAM;AACV,aACI,0CACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,IAAI,EAAC,IAA3B;AAAgC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKC,YAAL,CAAkBD,EAAlB,CAAN;AAAA,SAAzC;AAAsE,QAAA,OAAO,MAA7E;AAA8E,QAAA,KAAK,EAAC,SAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAKH,KAbiB;;AAAA,UAelBE,IAfkB,GAeZ,YAAI;AACN,YAAKC,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAE,CAAC,MAAKC,KAAL,CAAWD;AADT,OAAd;AAGH,KAnBiB;;AAAA,UAgDlBE,UAhDkB,GAgDN,UAACN,EAAD,EAAM;AACd,UAAIA,EAAE,KAAK,CAAX,EAAc;AACV,eAAO,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACH,OAFD,MAEK;AACD,eAAO,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACH;AACJ,KAtDiB;;AAEd,UAAKK,KAAL,GAAa;AACTD,MAAAA,KAAK,EAAE;AADE,KAAb;AAFc;AAKjB;;;;;;;gDAgBkBJ,E;;;;;AAEfO,gBAAAA,OAAO,CAACC,GAAR,CAAYR,EAAZ;AACAO,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWW,IAAvB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA+BI;AAEJ,UAAMC,OAAO,GAAG;AACZC,QAAAA,WAAW,EAAE,EADD;AAEZC,QAAAA,eAAe,EAAE,IAFL;AAGZC,QAAAA,OAAO,EAAE,MAHG;AAIZC,QAAAA,QAAQ,EAAE;AAJE,OAAhB;AAMA,aACI,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAG,KAAKhB,KAAL,CAAWM,KAAnC;AAA0C,QAAA,IAAI,EAAG,KAAKN,KAAL,CAAWI,IAA5D;AAAkE,QAAA,KAAK,EAAG,qBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAE,KAAKG,KAAL,CAAWD,KAA3B;AAAkC,QAAA,IAAI,EAAE,iBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AACI,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWW,IADrB;AAEI,QAAA,QAAQ,EAAE,KAFd;AAGI,QAAA,OAAO,MAHX;AAII,QAAA,UAAU,EAAE,IAJhB;AAKI,QAAA,OAAO,EAAEC,OALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAC,gBADd;AAEI,QAAA,KAAK,EAAC,KAFV;AAGI,QAAA,KAAK,EAAI,IAHb;AAII,QAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANJ,EAaI,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAC,eADd;AAEI,QAAA,KAAK,EAAC,KAFV;AAGI,QAAA,QAAQ,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAbJ,EAmBI,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAC,QADd;AAEI,QAAA,UAAU,EAAE,KAAKJ,UAFrB;AAGI,QAAA,KAAK,EAAC,KAHV;AAII,QAAA,QAAQ,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBJ,EA0BI,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAC,SADd;AAEI,QAAA,UAAU,EAAE,KAAKP,MAFrB;AAGI,QAAA,KAAK,EAAC,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1BJ,CADJ,CAFA,CADJ,CADJ,CADJ,CADJ,CADJ;AAgDH;;;;EAjHsBZ,KAAK,CAAC4B,S;;AAqHjC,eAAelB,YAAf","sourcesContent":["import React from 'react';\r\nimport Baselistmmodal from 'layouts/list_modal.jsx';\r\nimport { BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\nimport {Button , Badge} from 'reactstrap';\r\nimport download from 'downloadjs';\r\nimport Loading from 'layouts/loading-modal';\r\nimport Scroll from 'simplebar-react';\r\nimport app from 'app';\r\n\r\n\r\nclass detailformat extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            modal: false\r\n        }\r\n    }\r\n\r\n    action =(id)=>{\r\n        return(\r\n            <>\r\n                <Button type=\"button\" size=\"sm\" onClick={() => this.Downloadfile(id)} outline color=\"success\">Download</Button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    mode =()=>{\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    }\r\n\r\n    async Downloadfile(id){\r\n\r\n        console.log(id)\r\n        console.log(this.props.data)\r\n        /*let data = this.props.data.filter(res => res.ID_FORMAT === id)[0];\r\n       let idfile = data.ID_FORMAT;\r\n       let name = data.ORIGINAL_NAME;\r\n\r\n       console.log(name);\r\n      \r\n       this.mode();\r\n\r\n       let res = await fetch(app.proxy+'formatfile/download/'+idfile ,{\r\n           method: 'get',\r\n           headers: app.head2\r\n       });\r\n\r\n       if (res) {\r\n        let blob = await res.blob();\r\n    \r\n        download(blob , name);\r\n        this.mode();\r\n        app.apiGet1('formatfile/delete',idfile)  \r\n\r\n       }*/\r\n    }\r\n\r\n    cekversion =(id)=>{\r\n        if (id === 1) {\r\n            return <Badge color=\"success\">File Terbaru</Badge> \r\n        }else{\r\n            return <Badge color=\"danger\">File Lama</Badge> \r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const options = {\r\n            sizePerPage: 10,\r\n            hideSizePerPage: true,\r\n            prePage: 'Back',\r\n            nextPage: 'Next',\r\n          };\r\n        return(\r\n            <Baselistmmodal modal= {this.props.modal} mode ={this.props.mode} title ={'List Format Laporan'}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"card\">\r\n                            <div className=\"content table-responsive\">\r\n                            <Loading modal={this.state.modal} text={'Proses Download'}/>\r\n                            <Scroll>\r\n                                <BootstrapTable\r\n                                    data={this.props.data}\r\n                                    bordered={false}\r\n                                    striped\r\n                                    pagination={true}\r\n                                    options={options}>\r\n                                    <TableHeaderColumn\r\n                                        dataField='TANGGAL_UPLOAD'\r\n                                        width='16%'\r\n                                        isKey = {true}\r\n                                        dataSort>\r\n                                        Tanggal Upload\r\n                                    </TableHeaderColumn>\r\n                                    <TableHeaderColumn\r\n                                        dataField='ORIGINAL_NAME'\r\n                                        width='16%'\r\n                                        dataSort>\r\n                                        File Name\r\n                                    </TableHeaderColumn>\r\n                                    <TableHeaderColumn\r\n                                        dataField='ACTIVE'\r\n                                        dataFormat={this.cekversion}\r\n                                        width='16%'\r\n                                        dataSort>\r\n                                        Status\r\n                                    </TableHeaderColumn>\r\n                                    <TableHeaderColumn\r\n                                        dataField='ID_FILE'\r\n                                        dataFormat={this.action}\r\n                                        width='16%'>\r\n                                        Action\r\n                                    </TableHeaderColumn>\r\n                                </BootstrapTable>\r\n                            </Scroll>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>  \r\n            </Baselistmmodal>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default detailformat;"]},"metadata":{},"sourceType":"module"}