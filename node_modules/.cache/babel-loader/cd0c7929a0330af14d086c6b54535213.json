{"ast":null,"code":"/*!\n * FilePondPluginFileEncode 2.1.4\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginFileEncode = factory());\n})(this, function () {\n  'use strict';\n\n  var DataURIWorker = function DataURIWorker() {\n    // route messages\n    self.onmessage = function (e) {\n      convert(e.data.message, function (response) {\n        self.postMessage({\n          id: e.data.id,\n          message: response\n        });\n      });\n    }; // convert file to data uri\n\n\n    var convert = function convert(options, cb) {\n      var file = options.file;\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        cb(reader.result.replace('data:', '').replace(/^.+,/, ''));\n      };\n\n      reader.readAsDataURL(file);\n    };\n  };\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils; // get quick reference to Type utils\n\n    var Type = utils.Type,\n        createWorker = utils.createWorker,\n        createRoute = utils.createRoute,\n        isFile = utils.isFile;\n\n    var encode = function encode(_ref2) {\n      var name = _ref2.name,\n          file = _ref2.file;\n      return new Promise(function (resolve) {\n        var worker = createWorker(DataURIWorker);\n        worker.post({\n          file: file\n        }, function (data) {\n          resolve({\n            name: name,\n            data: data\n          });\n          worker.terminate();\n        });\n      });\n    }; // holds base64 strings till can be moved to item\n\n\n    var base64Cache = [];\n    addFilter('DID_CREATE_ITEM', function (item, _ref3) {\n      var query = _ref3.query;\n      if (!query('GET_ALLOW_FILE_ENCODE')) return;\n      item.extend('getFileEncodeBase64String', function () {\n        return base64Cache[item.id].data;\n      });\n      item.extend('getFileEncodeDataURL', function () {\n        return 'data:'.concat(item.fileType, ';base64,').concat(base64Cache[item.id].data);\n      });\n    });\n    addFilter('SHOULD_PREPARE_OUTPUT', function (shouldPrepareOutput, _ref4) {\n      var query = _ref4.query;\n      return new Promise(function (resolve) {\n        resolve(query('GET_ALLOW_FILE_ENCODE'));\n      });\n    });\n    addFilter('COMPLETE_PREPARE_OUTPUT', function (file, _ref5) {\n      var item = _ref5.item,\n          query = _ref5.query;\n      return new Promise(function (resolve) {\n        // if it's not a file or a list of files, continue\n        if (!query('GET_ALLOW_FILE_ENCODE') || !isFile(file) && !Array.isArray(file)) {\n          return resolve(file);\n        } // store metadata settings for this cache\n\n\n        base64Cache[item.id] = {\n          metadata: item.getMetadata(),\n          data: null\n        }; // wait for all file items to be encoded\n\n        Promise.all((file instanceof Blob ? [{\n          name: null,\n          file: file\n        }] : file).map(encode)).then(function (dataItems) {\n          base64Cache[item.id].data = file instanceof Blob ? dataItems[0].data : dataItems;\n          resolve(file);\n        });\n      });\n    }); // called for each view that is created right after the 'create' method\n\n    addFilter('CREATE_VIEW', function (viewAPI) {\n      // get reference to created view\n      var is = viewAPI.is,\n          view = viewAPI.view,\n          query = viewAPI.query; // only hook up to item view\n\n      if (!is('file-wrapper') || !query('GET_ALLOW_FILE_ENCODE')) {\n        return;\n      }\n\n      view.registerWriter(createRoute({\n        DID_PREPARE_OUTPUT: function DID_PREPARE_OUTPUT(_ref6) {\n          var root = _ref6.root,\n              action = _ref6.action; // only do this if is not uploading async\n\n          if (query('IS_ASYNC')) {\n            return;\n          }\n\n          var item = query('GET_ITEM', action.id);\n          if (!item) return; // extract base64 string\n\n          var cache = base64Cache[item.id];\n          var metadata = cache.metadata;\n          var data = cache.data; // create JSON string from encoded data and stores in the hidden input field\n\n          root.ref.data.value = JSON.stringify({\n            id: item.id,\n            name: item.file.name,\n            type: item.file.type,\n            size: item.file.size,\n            metadata: metadata,\n            data: data\n          });\n        },\n        DID_REMOVE_ITEM: function DID_REMOVE_ITEM(_ref7) {\n          var action = _ref7.action;\n          var item = query('GET_ITEM', action.id);\n          if (!item) return;\n          delete base64Cache[item.id];\n        }\n      }));\n    });\n    return {\n      options: {\n        // Enable or disable file encoding\n        allowFileEncode: [true, Type.BOOLEAN]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":null,"metadata":{},"sourceType":"script"}