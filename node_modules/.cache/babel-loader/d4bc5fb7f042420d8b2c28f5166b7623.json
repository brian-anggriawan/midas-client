{"ast":null,"code":"// Generated by CoffeeScript 1.12.5\n(function () {\n  this.EmojiPicker = function () {\n    function EmojiPicker(options) {\n      var ref, ref1;\n\n      if (options == null) {\n        options = {};\n      }\n\n      $.emojiarea.iconSize = (ref = options.iconSize) != null ? ref : 25;\n      $.emojiarea.assetsPath = (ref1 = options.assetsPath) != null ? ref1 : '';\n      this.generateEmojiIconSets(options);\n\n      if (!options.emojiable_selector) {\n        options.emojiable_selector = '[data-emojiable=true]';\n      }\n\n      this.options = options;\n    }\n\n    EmojiPicker.prototype.discover = function () {\n      var isiOS;\n      isiOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n      if (isiOS) {\n        return;\n      }\n\n      return $(this.options.emojiable_selector).emojiarea($.extend({\n        emojiPopup: this,\n        norealTime: true\n      }, this.options));\n    };\n\n    EmojiPicker.prototype.generateEmojiIconSets = function (options) {\n      var column, dataItem, hex, i, icons, j, name, reverseIcons, row, totalColumns;\n      icons = {};\n      reverseIcons = {};\n      i = void 0;\n      j = void 0;\n      hex = void 0;\n      name = void 0;\n      dataItem = void 0;\n      row = void 0;\n      column = void 0;\n      totalColumns = void 0;\n      j = 0;\n\n      while (j < Config.EmojiCategories.length) {\n        totalColumns = Config.EmojiCategorySpritesheetDimens[j][1];\n        i = 0;\n\n        while (i < Config.EmojiCategories[j].length) {\n          dataItem = Config.Emoji[Config.EmojiCategories[j][i]];\n          name = dataItem[1][0];\n          row = Math.floor(i / totalColumns);\n          column = i % totalColumns;\n          icons[':' + name + ':'] = [j, row, column, ':' + name + ':'];\n          reverseIcons[name] = dataItem[0];\n          i++;\n        }\n\n        j++;\n      }\n\n      $.emojiarea.icons = icons;\n      return $.emojiarea.reverseIcons = reverseIcons;\n    };\n\n    EmojiPicker.prototype.colonToUnicode = function (input) {\n      if (!input) {\n        return '';\n      }\n\n      if (!Config.rx_colons) {\n        Config.init_unified();\n      }\n\n      return input.replace(Config.rx_colons, function (m) {\n        var val;\n        val = Config.mapcolon[m];\n\n        if (val) {\n          return val;\n        } else {\n          return '';\n        }\n      });\n    };\n\n    EmojiPicker.prototype.appendUnicodeAsImageToElement = function (element, input) {\n      var k, len, split_on_unicode, text, val;\n\n      if (!input) {\n        return '';\n      }\n\n      if (!Config.rx_codes) {\n        Config.init_unified();\n      }\n\n      split_on_unicode = input.split(Config.rx_codes);\n\n      for (k = 0, len = split_on_unicode.length; k < len; k++) {\n        text = split_on_unicode[k];\n        val = '';\n\n        if (Config.rx_codes.test(text)) {\n          val = Config.reversemap[text];\n\n          if (val) {\n            val = ':' + val + ':';\n            val = $.emojiarea.createIcon($.emojiarea.icons[val]);\n          }\n        } else {\n          val = document.createTextNode(text);\n        }\n\n        element.append(val);\n      }\n\n      return input.replace(Config.rx_codes, function (m) {\n        var $img;\n        val = Config.reversemap[m];\n\n        if (val) {\n          val = ':' + val + ':';\n          $img = $.emojiarea.createIcon($.emojiarea.icons[val]);\n          return $img;\n        } else {\n          return '';\n        }\n      });\n    };\n\n    EmojiPicker.prototype.colonToImage = function (input) {\n      if (!input) {\n        return '';\n      }\n\n      if (!Config.rx_colons) {\n        Config.init_unified();\n      }\n\n      return input.replace(Config.rx_colons, function (m) {\n        var $img;\n\n        if (m) {\n          $img = $.emojiarea.createIcon($.emojiarea.icons[m]);\n          return $img;\n        } else {\n          return '';\n        }\n      });\n    };\n\n    return EmojiPicker;\n  }();\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}