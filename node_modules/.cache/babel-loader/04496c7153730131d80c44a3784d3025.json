{"ast":null,"code":"/* shifty - v1.5.3 - 2016-11-29 - http://jeremyckahn.github.io/shifty */\n;\n(function () {\n  var root = this || Function('return this')();\n  /**\n   * Shifty Core\n   * By Jeremy Kahn - jeremyckahn@gmail.com\n   */\n\n  var Tweenable = function () {\n    'use strict'; // Aliases that get defined later in this function\n\n    var formula; // CONSTANTS\n\n    var DEFAULT_SCHEDULE_FUNCTION;\n    var DEFAULT_EASING = 'linear';\n    var DEFAULT_DURATION = 500;\n    var UPDATE_TIME = 1000 / 60;\n\n    var _now = Date.now ? Date.now : function () {\n      return +new Date();\n    };\n\n    var now = typeof SHIFTY_DEBUG_NOW !== 'undefined' ? SHIFTY_DEBUG_NOW : _now;\n\n    if (typeof window !== 'undefined') {\n      // requestAnimationFrame() shim by Paul Irish (modified for Shifty)\n      // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n      DEFAULT_SCHEDULE_FUNCTION = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || window.mozCancelRequestAnimationFrame && window.mozRequestAnimationFrame || setTimeout;\n    } else {\n      DEFAULT_SCHEDULE_FUNCTION = setTimeout;\n    }\n\n    function noop() {} // NOOP!\n\n    /**\n     * Handy shortcut for doing a for-in loop. This is not a \"normal\" each\n     * function, it is optimized for Shifty.  The iterator function only receives\n     * the property name, not the value.\n     * @param {Object} obj\n     * @param {Function(string)} fn\n     * @private\n     */\n\n\n    function each(obj, fn) {\n      var key;\n\n      for (key in obj) {\n        if (Object.hasOwnProperty.call(obj, key)) {\n          fn(key);\n        }\n      }\n    }\n    /**\n     * Perform a shallow copy of Object properties.\n     * @param {Object} targetObject The object to copy into\n     * @param {Object} srcObject The object to copy from\n     * @return {Object} A reference to the augmented `targetObj` Object\n     * @private\n     */\n\n\n    function shallowCopy(targetObj, srcObj) {\n      each(srcObj, function (prop) {\n        targetObj[prop] = srcObj[prop];\n      });\n      return targetObj;\n    }\n    /**\n     * Copies each property from src onto target, but only if the property to\n     * copy to target is undefined.\n     * @param {Object} target Missing properties in this Object are filled in\n     * @param {Object} src\n     * @private\n     */\n\n\n    function defaults(target, src) {\n      each(src, function (prop) {\n        if (typeof target[prop] === 'undefined') {\n          target[prop] = src[prop];\n        }\n      });\n    }\n    /**\n     * Calculates the interpolated tween values of an Object for a given\n     * timestamp.\n     * @param {Number} forPosition The position to compute the state for.\n     * @param {Object} currentState Current state properties.\n     * @param {Object} originalState: The original state properties the Object is\n     * tweening from.\n     * @param {Object} targetState: The destination state properties the Object\n     * is tweening to.\n     * @param {number} duration: The length of the tween in milliseconds.\n     * @param {number} timestamp: The UNIX epoch time at which the tween began.\n     * @param {Object} easing: This Object's keys must correspond to the keys in\n     * targetState.\n     * @private\n     */\n\n\n    function tweenProps(forPosition, currentState, originalState, targetState, duration, timestamp, easing) {\n      var normalizedPosition = forPosition < timestamp ? 0 : (forPosition - timestamp) / duration;\n      var prop;\n      var easingObjectProp;\n      var easingFn;\n\n      for (prop in currentState) {\n        if (currentState.hasOwnProperty(prop)) {\n          easingObjectProp = easing[prop];\n          easingFn = typeof easingObjectProp === 'function' ? easingObjectProp : formula[easingObjectProp];\n          currentState[prop] = tweenProp(originalState[prop], targetState[prop], easingFn, normalizedPosition);\n        }\n      }\n\n      return currentState;\n    }\n    /**\n     * Tweens a single property.\n     * @param {number} start The value that the tween started from.\n     * @param {number} end The value that the tween should end at.\n     * @param {Function} easingFunc The easing curve to apply to the tween.\n     * @param {number} position The normalized position (between 0.0 and 1.0) to\n     * calculate the midpoint of 'start' and 'end' against.\n     * @return {number} The tweened value.\n     * @private\n     */\n\n\n    function tweenProp(start, end, easingFunc, position) {\n      return start + (end - start) * easingFunc(position);\n    }\n    /**\n     * Applies a filter to Tweenable instance.\n     * @param {Tweenable} tweenable The `Tweenable` instance to call the filter\n     * upon.\n     * @param {String} filterName The name of the filter to apply.\n     * @private\n     */\n\n\n    function applyFilter(tweenable, filterName) {\n      var filters = Tweenable.prototype.filter;\n      var args = tweenable._filterArgs;\n      each(filters, function (name) {\n        if (typeof filters[name][filterName] !== 'undefined') {\n          filters[name][filterName].apply(tweenable, args);\n        }\n      });\n    }\n\n    var timeoutHandler_endTime;\n    var timeoutHandler_currentTime;\n    var timeoutHandler_isEnded;\n    var timeoutHandler_offset;\n    /**\n     * Handles the update logic for one step of a tween.\n     * @param {Tweenable} tweenable\n     * @param {number} timestamp\n     * @param {number} delay\n     * @param {number} duration\n     * @param {Object} currentState\n     * @param {Object} originalState\n     * @param {Object} targetState\n     * @param {Object} easing\n     * @param {Function(Object, *, number)} step\n     * @param {Function(Function,number)}} schedule\n     * @param {number=} opt_currentTimeOverride Needed for accurate timestamp in\n     * Tweenable#seek.\n     * @private\n     */\n\n    function timeoutHandler(tweenable, timestamp, delay, duration, currentState, originalState, targetState, easing, step, schedule, opt_currentTimeOverride) {\n      timeoutHandler_endTime = timestamp + delay + duration;\n      timeoutHandler_currentTime = Math.min(opt_currentTimeOverride || now(), timeoutHandler_endTime);\n      timeoutHandler_isEnded = timeoutHandler_currentTime >= timeoutHandler_endTime;\n      timeoutHandler_offset = duration - (timeoutHandler_endTime - timeoutHandler_currentTime);\n\n      if (tweenable.isPlaying()) {\n        if (timeoutHandler_isEnded) {\n          step(targetState, tweenable._attachment, timeoutHandler_offset);\n          tweenable.stop(true);\n        } else {\n          tweenable._scheduleId = schedule(tweenable._timeoutHandler, UPDATE_TIME);\n          applyFilter(tweenable, 'beforeTween'); // If the animation has not yet reached the start point (e.g., there was\n          // delay that has not yet completed), just interpolate the starting\n          // position of the tween.\n\n          if (timeoutHandler_currentTime < timestamp + delay) {\n            tweenProps(1, currentState, originalState, targetState, 1, 1, easing);\n          } else {\n            tweenProps(timeoutHandler_currentTime, currentState, originalState, targetState, duration, timestamp + delay, easing);\n          }\n\n          applyFilter(tweenable, 'afterTween');\n          step(currentState, tweenable._attachment, timeoutHandler_offset);\n        }\n      }\n    }\n    /**\n     * Creates a usable easing Object from a string, a function or another easing\n     * Object.  If `easing` is an Object, then this function clones it and fills\n     * in the missing properties with `\"linear\"`.\n     * @param {Object.<string|Function>} fromTweenParams\n     * @param {Object|string|Function} easing\n     * @return {Object.<string|Function>}\n     * @private\n     */\n\n\n    function composeEasingObject(fromTweenParams, easing) {\n      var composedEasing = {};\n      var typeofEasing = typeof easing;\n\n      if (typeofEasing === 'string' || typeofEasing === 'function') {\n        each(fromTweenParams, function (prop) {\n          composedEasing[prop] = easing;\n        });\n      } else {\n        each(fromTweenParams, function (prop) {\n          if (!composedEasing[prop]) {\n            composedEasing[prop] = easing[prop] || DEFAULT_EASING;\n          }\n        });\n      }\n\n      return composedEasing;\n    }\n    /**\n     * Tweenable constructor.\n     * @class Tweenable\n     * @param {Object=} opt_initialState The values that the initial tween should\n     * start at if a `from` object is not provided to `{{#crossLink\n     * \"Tweenable/tween:method\"}}{{/crossLink}}` or `{{#crossLink\n     * \"Tweenable/setConfig:method\"}}{{/crossLink}}`.\n     * @param {Object=} opt_config Configuration object to be passed to\n     * `{{#crossLink \"Tweenable/setConfig:method\"}}{{/crossLink}}`.\n     * @module Tweenable\n     * @constructor\n     */\n\n\n    function Tweenable(opt_initialState, opt_config) {\n      this._currentState = opt_initialState || {};\n      this._configured = false;\n      this._scheduleFunction = DEFAULT_SCHEDULE_FUNCTION; // To prevent unnecessary calls to setConfig do not set default\n      // configuration here.  Only set default configuration immediately before\n      // tweening if none has been set.\n\n      if (typeof opt_config !== 'undefined') {\n        this.setConfig(opt_config);\n      }\n    }\n    /**\n     * Configure and start a tween.\n     * @method tween\n     * @param {Object=} opt_config Configuration object to be passed to\n     * `{{#crossLink \"Tweenable/setConfig:method\"}}{{/crossLink}}`.\n     * @chainable\n     */\n\n\n    Tweenable.prototype.tween = function (opt_config) {\n      if (this._isTweening) {\n        return this;\n      } // Only set default config if no configuration has been set previously and\n      // none is provided now.\n\n\n      if (opt_config !== undefined || !this._configured) {\n        this.setConfig(opt_config);\n      }\n\n      this._timestamp = now();\n\n      this._start(this.get(), this._attachment);\n\n      return this.resume();\n    };\n    /**\n     * Configure a tween that will start at some point in the future.\n     *\n     * @method setConfig\n     * @param {Object} config The following values are valid:\n     * - __from__ (_Object=_): Starting position.  If omitted, `{{#crossLink\n     *   \"Tweenable/get:method\"}}get(){{/crossLink}}` is used.\n     * - __to__ (_Object=_): Ending position.\n     * - __duration__ (_number=_): How many milliseconds to animate for.\n     * - __delay__ (_delay=_): How many milliseconds to wait before starting the\n     *   tween.\n     * - __start__ (_Function(Object, *)_): Function to execute when the tween\n     *   begins.  Receives the state of the tween as the first parameter and\n     *   `attachment` as the second parameter.\n     * - __step__ (_Function(Object, *, number)_): Function to execute on every\n     *   tick.  Receives `{{#crossLink\n     *   \"Tweenable/get:method\"}}get(){{/crossLink}}` as the first parameter,\n     *   `attachment` as the second parameter, and the time elapsed since the\n     *   start of the tween as the third. This function is not called on the\n     *   final step of the animation, but `finish` is.\n     * - __finish__ (_Function(Object, *)_): Function to execute upon tween\n     *   completion.  Receives the state of the tween as the first parameter and\n     *   `attachment` as the second parameter.\n     * - __easing__ (_Object.<string|Function>|string|Function=_): Easing curve\n     *   name(s) or function(s) to use for the tween.\n     * - __attachment__ (_*_): Cached value that is passed to the\n     *   `step`/`start`/`finish` methods.\n     * @chainable\n     */\n\n\n    Tweenable.prototype.setConfig = function (config) {\n      config = config || {};\n      this._configured = true; // Attach something to this Tweenable instance (e.g.: a DOM element, an\n      // object, a string, etc.);\n\n      this._attachment = config.attachment; // Init the internal state\n\n      this._pausedAtTime = null;\n      this._scheduleId = null;\n      this._delay = config.delay || 0;\n      this._start = config.start || noop;\n      this._step = config.step || noop;\n      this._finish = config.finish || noop;\n      this._duration = config.duration || DEFAULT_DURATION;\n      this._currentState = shallowCopy({}, config.from || this.get());\n      this._originalState = this.get();\n      this._targetState = shallowCopy({}, config.to || this.get());\n      var self = this;\n\n      this._timeoutHandler = function () {\n        timeoutHandler(self, self._timestamp, self._delay, self._duration, self._currentState, self._originalState, self._targetState, self._easing, self._step, self._scheduleFunction);\n      }; // Aliases used below\n\n\n      var currentState = this._currentState;\n      var targetState = this._targetState; // Ensure that there is always something to tween to.\n\n      defaults(targetState, currentState);\n      this._easing = composeEasingObject(currentState, config.easing || DEFAULT_EASING);\n      this._filterArgs = [currentState, this._originalState, targetState, this._easing];\n      applyFilter(this, 'tweenCreated');\n      return this;\n    };\n    /**\n     * @method get\n     * @return {Object} The current state.\n     */\n\n\n    Tweenable.prototype.get = function () {\n      return shallowCopy({}, this._currentState);\n    };\n    /**\n     * @method set\n     * @param {Object} state The current state.\n     */\n\n\n    Tweenable.prototype.set = function (state) {\n      this._currentState = state;\n    };\n    /**\n     * Pause a tween.  Paused tweens can be resumed from the point at which they\n     * were paused.  This is different from `{{#crossLink\n     * \"Tweenable/stop:method\"}}{{/crossLink}}`, as that method\n     * causes a tween to start over when it is resumed.\n     * @method pause\n     * @chainable\n     */\n\n\n    Tweenable.prototype.pause = function () {\n      this._pausedAtTime = now();\n      this._isPaused = true;\n      return this;\n    };\n    /**\n     * Resume a paused tween.\n     * @method resume\n     * @chainable\n     */\n\n\n    Tweenable.prototype.resume = function () {\n      if (this._isPaused) {\n        this._timestamp += now() - this._pausedAtTime;\n      }\n\n      this._isPaused = false;\n      this._isTweening = true;\n\n      this._timeoutHandler();\n\n      return this;\n    };\n    /**\n     * Move the state of the animation to a specific point in the tween's\n     * timeline.  If the animation is not running, this will cause the `step`\n     * handlers to be called.\n     * @method seek\n     * @param {millisecond} millisecond The millisecond of the animation to seek\n     * to.  This must not be less than `0`.\n     * @chainable\n     */\n\n\n    Tweenable.prototype.seek = function (millisecond) {\n      millisecond = Math.max(millisecond, 0);\n      var currentTime = now();\n\n      if (this._timestamp + millisecond === 0) {\n        return this;\n      }\n\n      this._timestamp = currentTime - millisecond;\n\n      if (!this.isPlaying()) {\n        this._isTweening = true;\n        this._isPaused = false; // If the animation is not running, call timeoutHandler to make sure that\n        // any step handlers are run.\n\n        timeoutHandler(this, this._timestamp, this._delay, this._duration, this._currentState, this._originalState, this._targetState, this._easing, this._step, this._scheduleFunction, currentTime);\n        this.pause();\n      }\n\n      return this;\n    };\n    /**\n     * Stops and cancels a tween.\n     * @param {boolean=} gotoEnd If `false` or omitted, the tween just stops at\n     * its current state, and the `finish` handler is not invoked.  If `true`,\n     * the tweened object's values are instantly set to the target values, and\n     * `finish` is invoked.\n     * @method stop\n     * @chainable\n     */\n\n\n    Tweenable.prototype.stop = function (gotoEnd) {\n      this._isTweening = false;\n      this._isPaused = false;\n      this._timeoutHandler = noop;\n      (root.cancelAnimationFrame || root.webkitCancelAnimationFrame || root.oCancelAnimationFrame || root.msCancelAnimationFrame || root.mozCancelRequestAnimationFrame || root.clearTimeout)(this._scheduleId);\n\n      if (gotoEnd) {\n        applyFilter(this, 'beforeTween');\n        tweenProps(1, this._currentState, this._originalState, this._targetState, 1, 0, this._easing);\n        applyFilter(this, 'afterTween');\n        applyFilter(this, 'afterTweenEnd');\n\n        this._finish.call(this, this._currentState, this._attachment);\n      }\n\n      return this;\n    };\n    /**\n     * @method isPlaying\n     * @return {boolean} Whether or not a tween is running.\n     */\n\n\n    Tweenable.prototype.isPlaying = function () {\n      return this._isTweening && !this._isPaused;\n    };\n    /**\n     * Set a custom schedule function.\n     *\n     * If a custom function is not set,\n     * [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)\n     * is used if available, otherwise\n     * [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout)\n     * is used.\n     * @method setScheduleFunction\n     * @param {Function(Function,number)} scheduleFunction The function to be\n     * used to schedule the next frame to be rendered.\n     */\n\n\n    Tweenable.prototype.setScheduleFunction = function (scheduleFunction) {\n      this._scheduleFunction = scheduleFunction;\n    };\n    /**\n     * `delete` all \"own\" properties.  Call this when the `Tweenable` instance\n     * is no longer needed to free memory.\n     * @method dispose\n     */\n\n\n    Tweenable.prototype.dispose = function () {\n      var prop;\n\n      for (prop in this) {\n        if (this.hasOwnProperty(prop)) {\n          delete this[prop];\n        }\n      }\n    };\n    /**\n     * Filters are used for transforming the properties of a tween at various\n     * points in a Tweenable's life cycle.  See the README for more info on this.\n     * @private\n     */\n\n\n    Tweenable.prototype.filter = {};\n    /**\n     * This object contains all of the tweens available to Shifty.  It is\n     * extensible - simply attach properties to the `Tweenable.prototype.formula`\n     * Object following the same format as `linear`.\n     *\n     * `pos` should be a normalized `number` (between 0 and 1).\n     * @property formula\n     * @type {Object(function)}\n     */\n\n    Tweenable.prototype.formula = {\n      linear: function linear(pos) {\n        return pos;\n      }\n    };\n    formula = Tweenable.prototype.formula;\n    shallowCopy(Tweenable, {\n      'now': now,\n      'each': each,\n      'tweenProps': tweenProps,\n      'tweenProp': tweenProp,\n      'applyFilter': applyFilter,\n      'shallowCopy': shallowCopy,\n      'defaults': defaults,\n      'composeEasingObject': composeEasingObject\n    }); // `root` is provided in the intro/outro files.\n    // A hook used for unit testing.\n\n    if (typeof SHIFTY_DEBUG_NOW === 'function') {\n      root.timeoutHandler = timeoutHandler;\n    } // Bootstrap Tweenable appropriately for the environment.\n\n\n    if (typeof exports === 'object') {\n      // CommonJS\n      module.exports = Tweenable;\n    } else if (typeof define === 'function' && define.amd) {\n      // AMD\n      define(function () {\n        return Tweenable;\n      });\n    } else if (typeof root.Tweenable === 'undefined') {\n      // Browser: Make `Tweenable` globally accessible.\n      root.Tweenable = Tweenable;\n    }\n\n    return Tweenable;\n  }();\n  /*!\n   * All equations are adapted from Thomas Fuchs'\n   * [Scripty2](https://github.com/madrobby/scripty2/blob/master/src/effects/transitions/penner.js).\n   *\n   * Based on Easing Equations (c) 2003 [Robert\n   * Penner](http://www.robertpenner.com/), all rights reserved. This work is\n   * [subject to terms](http://www.robertpenner.com/easing_terms_of_use.html).\n   */\n\n  /*!\n   *  TERMS OF USE - EASING EQUATIONS\n   *  Open source under the BSD License.\n   *  Easing Equations (c) 2003 Robert Penner, all rights reserved.\n   */\n\n\n  ;\n\n  (function () {\n    Tweenable.shallowCopy(Tweenable.prototype.formula, {\n      easeInQuad: function easeInQuad(pos) {\n        return Math.pow(pos, 2);\n      },\n      easeOutQuad: function easeOutQuad(pos) {\n        return -(Math.pow(pos - 1, 2) - 1);\n      },\n      easeInOutQuad: function easeInOutQuad(pos) {\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(pos, 2);\n        }\n\n        return -0.5 * ((pos -= 2) * pos - 2);\n      },\n      easeInCubic: function easeInCubic(pos) {\n        return Math.pow(pos, 3);\n      },\n      easeOutCubic: function easeOutCubic(pos) {\n        return Math.pow(pos - 1, 3) + 1;\n      },\n      easeInOutCubic: function easeInOutCubic(pos) {\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(pos, 3);\n        }\n\n        return 0.5 * (Math.pow(pos - 2, 3) + 2);\n      },\n      easeInQuart: function easeInQuart(pos) {\n        return Math.pow(pos, 4);\n      },\n      easeOutQuart: function easeOutQuart(pos) {\n        return -(Math.pow(pos - 1, 4) - 1);\n      },\n      easeInOutQuart: function easeInOutQuart(pos) {\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(pos, 4);\n        }\n\n        return -0.5 * ((pos -= 2) * Math.pow(pos, 3) - 2);\n      },\n      easeInQuint: function easeInQuint(pos) {\n        return Math.pow(pos, 5);\n      },\n      easeOutQuint: function easeOutQuint(pos) {\n        return Math.pow(pos - 1, 5) + 1;\n      },\n      easeInOutQuint: function easeInOutQuint(pos) {\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(pos, 5);\n        }\n\n        return 0.5 * (Math.pow(pos - 2, 5) + 2);\n      },\n      easeInSine: function easeInSine(pos) {\n        return -Math.cos(pos * (Math.PI / 2)) + 1;\n      },\n      easeOutSine: function easeOutSine(pos) {\n        return Math.sin(pos * (Math.PI / 2));\n      },\n      easeInOutSine: function easeInOutSine(pos) {\n        return -0.5 * (Math.cos(Math.PI * pos) - 1);\n      },\n      easeInExpo: function easeInExpo(pos) {\n        return pos === 0 ? 0 : Math.pow(2, 10 * (pos - 1));\n      },\n      easeOutExpo: function easeOutExpo(pos) {\n        return pos === 1 ? 1 : -Math.pow(2, -10 * pos) + 1;\n      },\n      easeInOutExpo: function easeInOutExpo(pos) {\n        if (pos === 0) {\n          return 0;\n        }\n\n        if (pos === 1) {\n          return 1;\n        }\n\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(2, 10 * (pos - 1));\n        }\n\n        return 0.5 * (-Math.pow(2, -10 * --pos) + 2);\n      },\n      easeInCirc: function easeInCirc(pos) {\n        return -(Math.sqrt(1 - pos * pos) - 1);\n      },\n      easeOutCirc: function easeOutCirc(pos) {\n        return Math.sqrt(1 - Math.pow(pos - 1, 2));\n      },\n      easeInOutCirc: function easeInOutCirc(pos) {\n        if ((pos /= 0.5) < 1) {\n          return -0.5 * (Math.sqrt(1 - pos * pos) - 1);\n        }\n\n        return 0.5 * (Math.sqrt(1 - (pos -= 2) * pos) + 1);\n      },\n      easeOutBounce: function easeOutBounce(pos) {\n        if (pos < 1 / 2.75) {\n          return 7.5625 * pos * pos;\n        } else if (pos < 2 / 2.75) {\n          return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;\n        } else if (pos < 2.5 / 2.75) {\n          return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;\n        } else {\n          return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;\n        }\n      },\n      easeInBack: function easeInBack(pos) {\n        var s = 1.70158;\n        return pos * pos * ((s + 1) * pos - s);\n      },\n      easeOutBack: function easeOutBack(pos) {\n        var s = 1.70158;\n        return (pos = pos - 1) * pos * ((s + 1) * pos + s) + 1;\n      },\n      easeInOutBack: function easeInOutBack(pos) {\n        var s = 1.70158;\n\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * (pos * pos * (((s *= 1.525) + 1) * pos - s));\n        }\n\n        return 0.5 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2);\n      },\n      elastic: function elastic(pos) {\n        // jshint maxlen:90\n        return -1 * Math.pow(4, -8 * pos) * Math.sin((pos * 6 - 1) * (2 * Math.PI) / 2) + 1;\n      },\n      swingFromTo: function swingFromTo(pos) {\n        var s = 1.70158;\n        return (pos /= 0.5) < 1 ? 0.5 * (pos * pos * (((s *= 1.525) + 1) * pos - s)) : 0.5 * ((pos -= 2) * pos * (((s *= 1.525) + 1) * pos + s) + 2);\n      },\n      swingFrom: function swingFrom(pos) {\n        var s = 1.70158;\n        return pos * pos * ((s + 1) * pos - s);\n      },\n      swingTo: function swingTo(pos) {\n        var s = 1.70158;\n        return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;\n      },\n      bounce: function bounce(pos) {\n        if (pos < 1 / 2.75) {\n          return 7.5625 * pos * pos;\n        } else if (pos < 2 / 2.75) {\n          return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;\n        } else if (pos < 2.5 / 2.75) {\n          return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;\n        } else {\n          return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;\n        }\n      },\n      bouncePast: function bouncePast(pos) {\n        if (pos < 1 / 2.75) {\n          return 7.5625 * pos * pos;\n        } else if (pos < 2 / 2.75) {\n          return 2 - (7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75);\n        } else if (pos < 2.5 / 2.75) {\n          return 2 - (7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375);\n        } else {\n          return 2 - (7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375);\n        }\n      },\n      easeFromTo: function easeFromTo(pos) {\n        if ((pos /= 0.5) < 1) {\n          return 0.5 * Math.pow(pos, 4);\n        }\n\n        return -0.5 * ((pos -= 2) * Math.pow(pos, 3) - 2);\n      },\n      easeFrom: function easeFrom(pos) {\n        return Math.pow(pos, 4);\n      },\n      easeTo: function easeTo(pos) {\n        return Math.pow(pos, 0.25);\n      }\n    });\n  })(); // jshint maxlen:100\n\n  /**\n   * The Bezier magic in this file is adapted/copied almost wholesale from\n   * [Scripty2](https://github.com/madrobby/scripty2/blob/master/src/effects/transitions/cubic-bezier.js),\n   * which was adapted from Apple code (which probably came from\n   * [here](http://opensource.apple.com/source/WebCore/WebCore-955.66/platform/graphics/UnitBezier.h)).\n   * Special thanks to Apple and Thomas Fuchs for much of this code.\n   */\n\n  /**\n   *  Copyright (c) 2006 Apple Computer, Inc. All rights reserved.\n   *\n   *  Redistribution and use in source and binary forms, with or without\n   *  modification, are permitted provided that the following conditions are met:\n   *\n   *  1. Redistributions of source code must retain the above copyright notice,\n   *  this list of conditions and the following disclaimer.\n   *\n   *  2. Redistributions in binary form must reproduce the above copyright notice,\n   *  this list of conditions and the following disclaimer in the documentation\n   *  and/or other materials provided with the distribution.\n   *\n   *  3. Neither the name of the copyright holder(s) nor the names of any\n   *  contributors may be used to endorse or promote products derived from\n   *  this software without specific prior written permission.\n   *\n   *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n   *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n   *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n   *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n   *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n   *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n   *  POSSIBILITY OF SUCH DAMAGE.\n   */\n\n\n  ;\n\n  (function () {\n    // port of webkit cubic bezier handling by http://www.netzgesta.de/dev/\n    function cubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n      var ax = 0,\n          bx = 0,\n          cx = 0,\n          ay = 0,\n          by = 0,\n          cy = 0;\n\n      function sampleCurveX(t) {\n        return ((ax * t + bx) * t + cx) * t;\n      }\n\n      function sampleCurveY(t) {\n        return ((ay * t + by) * t + cy) * t;\n      }\n\n      function sampleCurveDerivativeX(t) {\n        return (3.0 * ax * t + 2.0 * bx) * t + cx;\n      }\n\n      function solveEpsilon(duration) {\n        return 1.0 / (200.0 * duration);\n      }\n\n      function solve(x, epsilon) {\n        return sampleCurveY(solveCurveX(x, epsilon));\n      }\n\n      function fabs(n) {\n        if (n >= 0) {\n          return n;\n        } else {\n          return 0 - n;\n        }\n      }\n\n      function solveCurveX(x, epsilon) {\n        var t0, t1, t2, x2, d2, i;\n\n        for (t2 = x, i = 0; i < 8; i++) {\n          x2 = sampleCurveX(t2) - x;\n\n          if (fabs(x2) < epsilon) {\n            return t2;\n          }\n\n          d2 = sampleCurveDerivativeX(t2);\n\n          if (fabs(d2) < 1e-6) {\n            break;\n          }\n\n          t2 = t2 - x2 / d2;\n        }\n\n        t0 = 0.0;\n        t1 = 1.0;\n        t2 = x;\n\n        if (t2 < t0) {\n          return t0;\n        }\n\n        if (t2 > t1) {\n          return t1;\n        }\n\n        while (t0 < t1) {\n          x2 = sampleCurveX(t2);\n\n          if (fabs(x2 - x) < epsilon) {\n            return t2;\n          }\n\n          if (x > x2) {\n            t0 = t2;\n          } else {\n            t1 = t2;\n          }\n\n          t2 = (t1 - t0) * 0.5 + t0;\n        }\n\n        return t2; // Failure.\n      }\n\n      cx = 3.0 * p1x;\n      bx = 3.0 * (p2x - p1x) - cx;\n      ax = 1.0 - cx - bx;\n      cy = 3.0 * p1y;\n      by = 3.0 * (p2y - p1y) - cy;\n      ay = 1.0 - cy - by;\n      return solve(t, solveEpsilon(duration));\n    }\n    /**\n     *  getCubicBezierTransition(x1, y1, x2, y2) -> Function\n     *\n     *  Generates a transition easing function that is compatible\n     *  with WebKit's CSS transitions `-webkit-transition-timing-function`\n     *  CSS property.\n     *\n     *  The W3C has more information about CSS3 transition timing functions:\n     *  http://www.w3.org/TR/css3-transitions/#transition-timing-function_tag\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @return {function}\n     *  @private\n     */\n\n\n    function getCubicBezierTransition(x1, y1, x2, y2) {\n      return function (pos) {\n        return cubicBezierAtTime(pos, x1, y1, x2, y2, 1);\n      };\n    } // End ported code\n\n    /**\n     * Create a Bezier easing function and attach it to `{{#crossLink\n     * \"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}`.  This\n     * function gives you total control over the easing curve.  Matthew Lein's\n     * [Ceaser](http://matthewlein.com/ceaser/) is a useful tool for visualizing\n     * the curves you can make with this function.\n     * @method setBezierFunction\n     * @param {string} name The name of the easing curve.  Overwrites the old\n     * easing function on `{{#crossLink\n     * \"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}` if it\n     * exists.\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @return {function} The easing function that was attached to\n     * Tweenable.prototype.formula.\n     */\n\n\n    Tweenable.setBezierFunction = function (name, x1, y1, x2, y2) {\n      var cubicBezierTransition = getCubicBezierTransition(x1, y1, x2, y2);\n      cubicBezierTransition.displayName = name;\n      cubicBezierTransition.x1 = x1;\n      cubicBezierTransition.y1 = y1;\n      cubicBezierTransition.x2 = x2;\n      cubicBezierTransition.y2 = y2;\n      return Tweenable.prototype.formula[name] = cubicBezierTransition;\n    };\n    /**\n     * `delete` an easing function from `{{#crossLink\n     * \"Tweenable/formula:property\"}}Tweenable#formula{{/crossLink}}`.  Be\n     * careful with this method, as it `delete`s whatever easing formula matches\n     * `name` (which means you can delete standard Shifty easing functions).\n     * @method unsetBezierFunction\n     * @param {string} name The name of the easing function to delete.\n     * @return {function}\n     */\n\n\n    Tweenable.unsetBezierFunction = function (name) {\n      delete Tweenable.prototype.formula[name];\n    };\n  })();\n\n  ;\n\n  (function () {\n    function getInterpolatedValues(from, current, targetState, position, easing, delay) {\n      return Tweenable.tweenProps(position, current, from, targetState, 1, delay, easing);\n    } // Fake a Tweenable and patch some internals.  This approach allows us to\n    // skip uneccessary processing and object recreation, cutting down on garbage\n    // collection pauses.\n\n\n    var mockTweenable = new Tweenable();\n    mockTweenable._filterArgs = [];\n    /**\n     * Compute the midpoint of two Objects.  This method effectively calculates a\n     * specific frame of animation that `{{#crossLink\n     * \"Tweenable/tween:method\"}}{{/crossLink}}` does many times over the course\n     * of a full tween.\n     *\n     *     var interpolatedValues = Tweenable.interpolate({\n     *       width: '100px',\n     *       opacity: 0,\n     *       color: '#fff'\n     *     }, {\n     *       width: '200px',\n     *       opacity: 1,\n     *       color: '#000'\n     *     }, 0.5);\n     *\n     *     console.log(interpolatedValues);\n     *     // {opacity: 0.5, width: \"150px\", color: \"rgb(127,127,127)\"}\n     *\n     * @static\n     * @method interpolate\n     * @param {Object} from The starting values to tween from.\n     * @param {Object} targetState The ending values to tween to.\n     * @param {number} position The normalized position value (between `0.0` and\n     * `1.0`) to interpolate the values between `from` and `to` for.  `from`\n     * represents `0` and `to` represents `1`.\n     * @param {Object.<string|Function>|string|Function} easing The easing\n     * curve(s) to calculate the midpoint against.  You can reference any easing\n     * function attached to `Tweenable.prototype.formula`, or provide the easing\n     * function(s) directly.  If omitted, this defaults to \"linear\".\n     * @param {number=} opt_delay Optional delay to pad the beginning of the\n     * interpolated tween with.  This increases the range of `position` from (`0`\n     * through `1`) to (`0` through `1 + opt_delay`).  So, a delay of `0.5` would\n     * increase all valid values of `position` to numbers between `0` and `1.5`.\n     * @return {Object}\n     */\n\n    Tweenable.interpolate = function (from, targetState, position, easing, opt_delay) {\n      var current = Tweenable.shallowCopy({}, from);\n      var delay = opt_delay || 0;\n      var easingObject = Tweenable.composeEasingObject(from, easing || 'linear');\n      mockTweenable.set({}); // Alias and reuse the _filterArgs array instead of recreating it.\n\n      var filterArgs = mockTweenable._filterArgs;\n      filterArgs.length = 0;\n      filterArgs[0] = current;\n      filterArgs[1] = from;\n      filterArgs[2] = targetState;\n      filterArgs[3] = easingObject; // Any defined value transformation must be applied\n\n      Tweenable.applyFilter(mockTweenable, 'tweenCreated');\n      Tweenable.applyFilter(mockTweenable, 'beforeTween');\n      var interpolatedValues = getInterpolatedValues(from, current, targetState, position, easingObject, delay); // Transform values back into their original format\n\n      Tweenable.applyFilter(mockTweenable, 'afterTween');\n      return interpolatedValues;\n    };\n  })();\n  /**\n   * This module adds string interpolation support to Shifty.\n   *\n   * The Token extension allows Shifty to tween numbers inside of strings.  Among\n   * other things, this allows you to animate CSS properties.  For example, you\n   * can do this:\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { transform: 'translateX(45px)' },\n   *       to: { transform: 'translateX(90xp)' }\n   *     });\n   *\n   * `translateX(45)` will be tweened to `translateX(90)`.  To demonstrate:\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { transform: 'translateX(45px)' },\n   *       to: { transform: 'translateX(90px)' },\n   *       step: function (state) {\n   *         console.log(state.transform);\n   *       }\n   *     });\n   *\n   * The above snippet will log something like this in the console:\n   *\n   *     translateX(60.3px)\n   *     ...\n   *     translateX(76.05px)\n   *     ...\n   *     translateX(90px)\n   *\n   * Another use for this is animating colors:\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { color: 'rgb(0,255,0)' },\n   *       to: { color: 'rgb(255,0,255)' },\n   *       step: function (state) {\n   *         console.log(state.color);\n   *       }\n   *     });\n   *\n   * The above snippet will log something like this:\n   *\n   *     rgb(84,170,84)\n   *     ...\n   *     rgb(170,84,170)\n   *     ...\n   *     rgb(255,0,255)\n   *\n   * This extension also supports hexadecimal colors, in both long (`#ff00ff`)\n   * and short (`#f0f`) forms.  Be aware that hexadecimal input values will be\n   * converted into the equivalent RGB output values.  This is done to optimize\n   * for performance.\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { color: '#0f0' },\n   *       to: { color: '#f0f' },\n   *       step: function (state) {\n   *         console.log(state.color);\n   *       }\n   *     });\n   *\n   * This snippet will generate the same output as the one before it because\n   * equivalent values were supplied (just in hexadecimal form rather than RGB):\n   *\n   *     rgb(84,170,84)\n   *     ...\n   *     rgb(170,84,170)\n   *     ...\n   *     rgb(255,0,255)\n   *\n   * ## Easing support\n   *\n   * Easing works somewhat differently in the Token extension.  This is because\n   * some CSS properties have multiple values in them, and you might need to\n   * tween each value along its own easing curve.  A basic example:\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { transform: 'translateX(0px) translateY(0px)' },\n   *       to: { transform:   'translateX(100px) translateY(100px)' },\n   *       easing: { transform: 'easeInQuad' },\n   *       step: function (state) {\n   *         console.log(state.transform);\n   *       }\n   *     });\n   *\n   * The above snippet will create values like this:\n   *\n   *     translateX(11.56px) translateY(11.56px)\n   *     ...\n   *     translateX(46.24px) translateY(46.24px)\n   *     ...\n   *     translateX(100px) translateY(100px)\n   *\n   * In this case, the values for `translateX` and `translateY` are always the\n   * same for each step of the tween, because they have the same start and end\n   * points and both use the same easing curve.  We can also tween `translateX`\n   * and `translateY` along independent curves:\n   *\n   *     var tweenable = new Tweenable();\n   *     tweenable.tween({\n   *       from: { transform: 'translateX(0px) translateY(0px)' },\n   *       to: { transform:   'translateX(100px) translateY(100px)' },\n   *       easing: { transform: 'easeInQuad bounce' },\n   *       step: function (state) {\n   *         console.log(state.transform);\n   *       }\n   *     });\n   *\n   * The above snippet will create values like this:\n   *\n   *     translateX(10.89px) translateY(82.35px)\n   *     ...\n   *     translateX(44.89px) translateY(86.73px)\n   *     ...\n   *     translateX(100px) translateY(100px)\n   *\n   * `translateX` and `translateY` are not in sync anymore, because `easeInQuad`\n   * was specified for `translateX` and `bounce` for `translateY`.  Mixing and\n   * matching easing curves can make for some interesting motion in your\n   * animations.\n   *\n   * The order of the space-separated easing curves correspond the token values\n   * they apply to.  If there are more token values than easing curves listed,\n   * the last easing curve listed is used.\n   * @submodule Tweenable.token\n   */\n  // token function is defined above only so that dox-foundation sees it as\n  // documentation and renders it.  It is never used, and is optimized away at\n  // build time.\n\n\n  ;\n\n  (function (Tweenable) {\n    /**\n     * @typedef {{\n     *   formatString: string\n     *   chunkNames: Array.<string>\n     * }}\n     * @private\n     */\n    var formatManifest; // CONSTANTS\n\n    var R_NUMBER_COMPONENT = /(\\d|\\-|\\.)/;\n    var R_FORMAT_CHUNKS = /([^\\-0-9\\.]+)/g;\n    var R_UNFORMATTED_VALUES = /[0-9.\\-]+/g;\n    var R_RGB = new RegExp('rgb\\\\(' + R_UNFORMATTED_VALUES.source + /,\\s*/.source + R_UNFORMATTED_VALUES.source + /,\\s*/.source + R_UNFORMATTED_VALUES.source + '\\\\)', 'g');\n    var R_RGB_PREFIX = /^.*\\(/;\n    var R_HEX = /#([0-9]|[a-f]){3,6}/gi;\n    var VALUE_PLACEHOLDER = 'VAL'; // HELPERS\n\n    /**\n     * @param {Array.number} rawValues\n     * @param {string} prefix\n     *\n     * @return {Array.<string>}\n     * @private\n     */\n\n    function getFormatChunksFrom(rawValues, prefix) {\n      var accumulator = [];\n      var rawValuesLength = rawValues.length;\n      var i;\n\n      for (i = 0; i < rawValuesLength; i++) {\n        accumulator.push('_' + prefix + '_' + i);\n      }\n\n      return accumulator;\n    }\n    /**\n     * @param {string} formattedString\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function getFormatStringFrom(formattedString) {\n      var chunks = formattedString.match(R_FORMAT_CHUNKS);\n\n      if (!chunks) {\n        // chunks will be null if there were no tokens to parse in\n        // formattedString (for example, if formattedString is '2').  Coerce\n        // chunks to be useful here.\n        chunks = ['', '']; // If there is only one chunk, assume that the string is a number\n        // followed by a token...\n        // NOTE: This may be an unwise assumption.\n      } else if (chunks.length === 1 || // ...or if the string starts with a number component (\".\", \"-\", or a\n      // digit)...\n      formattedString.charAt(0).match(R_NUMBER_COMPONENT)) {\n        // ...prepend an empty string here to make sure that the formatted number\n        // is properly replaced by VALUE_PLACEHOLDER\n        chunks.unshift('');\n      }\n\n      return chunks.join(VALUE_PLACEHOLDER);\n    }\n    /**\n     * Convert all hex color values within a string to an rgb string.\n     *\n     * @param {Object} stateObject\n     *\n     * @return {Object} The modified obj\n     * @private\n     */\n\n\n    function sanitizeObjectForHexProps(stateObject) {\n      Tweenable.each(stateObject, function (prop) {\n        var currentProp = stateObject[prop];\n\n        if (typeof currentProp === 'string' && currentProp.match(R_HEX)) {\n          stateObject[prop] = sanitizeHexChunksToRGB(currentProp);\n        }\n      });\n    }\n    /**\n     * @param {string} str\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function sanitizeHexChunksToRGB(str) {\n      return filterStringChunks(R_HEX, str, convertHexToRGB);\n    }\n    /**\n     * @param {string} hexString\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function convertHexToRGB(hexString) {\n      var rgbArr = hexToRGBArray(hexString);\n      return 'rgb(' + rgbArr[0] + ',' + rgbArr[1] + ',' + rgbArr[2] + ')';\n    }\n\n    var hexToRGBArray_returnArray = [];\n    /**\n     * Convert a hexadecimal string to an array with three items, one each for\n     * the red, blue, and green decimal values.\n     *\n     * @param {string} hex A hexadecimal string.\n     *\n     * @returns {Array.<number>} The converted Array of RGB values if `hex` is a\n     * valid string, or an Array of three 0's.\n     * @private\n     */\n\n    function hexToRGBArray(hex) {\n      hex = hex.replace(/#/, ''); // If the string is a shorthand three digit hex notation, normalize it to\n      // the standard six digit notation\n\n      if (hex.length === 3) {\n        hex = hex.split('');\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n      }\n\n      hexToRGBArray_returnArray[0] = hexToDec(hex.substr(0, 2));\n      hexToRGBArray_returnArray[1] = hexToDec(hex.substr(2, 2));\n      hexToRGBArray_returnArray[2] = hexToDec(hex.substr(4, 2));\n      return hexToRGBArray_returnArray;\n    }\n    /**\n     * Convert a base-16 number to base-10.\n     *\n     * @param {Number|String} hex The value to convert\n     *\n     * @returns {Number} The base-10 equivalent of `hex`.\n     * @private\n     */\n\n\n    function hexToDec(hex) {\n      return parseInt(hex, 16);\n    }\n    /**\n     * Runs a filter operation on all chunks of a string that match a RegExp\n     *\n     * @param {RegExp} pattern\n     * @param {string} unfilteredString\n     * @param {function(string)} filter\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function filterStringChunks(pattern, unfilteredString, filter) {\n      var pattenMatches = unfilteredString.match(pattern);\n      var filteredString = unfilteredString.replace(pattern, VALUE_PLACEHOLDER);\n\n      if (pattenMatches) {\n        var pattenMatchesLength = pattenMatches.length;\n        var currentChunk;\n\n        for (var i = 0; i < pattenMatchesLength; i++) {\n          currentChunk = pattenMatches.shift();\n          filteredString = filteredString.replace(VALUE_PLACEHOLDER, filter(currentChunk));\n        }\n      }\n\n      return filteredString;\n    }\n    /**\n     * Check for floating point values within rgb strings and rounds them.\n     *\n     * @param {string} formattedString\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function sanitizeRGBChunks(formattedString) {\n      return filterStringChunks(R_RGB, formattedString, sanitizeRGBChunk);\n    }\n    /**\n     * @param {string} rgbChunk\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function sanitizeRGBChunk(rgbChunk) {\n      var numbers = rgbChunk.match(R_UNFORMATTED_VALUES);\n      var numbersLength = numbers.length;\n      var sanitizedString = rgbChunk.match(R_RGB_PREFIX)[0];\n\n      for (var i = 0; i < numbersLength; i++) {\n        sanitizedString += parseInt(numbers[i], 10) + ',';\n      }\n\n      sanitizedString = sanitizedString.slice(0, -1) + ')';\n      return sanitizedString;\n    }\n    /**\n     * @param {Object} stateObject\n     *\n     * @return {Object} An Object of formatManifests that correspond to\n     * the string properties of stateObject\n     * @private\n     */\n\n\n    function getFormatManifests(stateObject) {\n      var manifestAccumulator = {};\n      Tweenable.each(stateObject, function (prop) {\n        var currentProp = stateObject[prop];\n\n        if (typeof currentProp === 'string') {\n          var rawValues = getValuesFrom(currentProp);\n          manifestAccumulator[prop] = {\n            'formatString': getFormatStringFrom(currentProp),\n            'chunkNames': getFormatChunksFrom(rawValues, prop)\n          };\n        }\n      });\n      return manifestAccumulator;\n    }\n    /**\n     * @param {Object} stateObject\n     * @param {Object} formatManifests\n     * @private\n     */\n\n\n    function expandFormattedProperties(stateObject, formatManifests) {\n      Tweenable.each(formatManifests, function (prop) {\n        var currentProp = stateObject[prop];\n        var rawValues = getValuesFrom(currentProp);\n        var rawValuesLength = rawValues.length;\n\n        for (var i = 0; i < rawValuesLength; i++) {\n          stateObject[formatManifests[prop].chunkNames[i]] = +rawValues[i];\n        }\n\n        delete stateObject[prop];\n      });\n    }\n    /**\n     * @param {Object} stateObject\n     * @param {Object} formatManifests\n     * @private\n     */\n\n\n    function collapseFormattedProperties(stateObject, formatManifests) {\n      Tweenable.each(formatManifests, function (prop) {\n        var currentProp = stateObject[prop];\n        var formatChunks = extractPropertyChunks(stateObject, formatManifests[prop].chunkNames);\n        var valuesList = getValuesList(formatChunks, formatManifests[prop].chunkNames);\n        currentProp = getFormattedValues(formatManifests[prop].formatString, valuesList);\n        stateObject[prop] = sanitizeRGBChunks(currentProp);\n      });\n    }\n    /**\n     * @param {Object} stateObject\n     * @param {Array.<string>} chunkNames\n     *\n     * @return {Object} The extracted value chunks.\n     * @private\n     */\n\n\n    function extractPropertyChunks(stateObject, chunkNames) {\n      var extractedValues = {};\n      var currentChunkName,\n          chunkNamesLength = chunkNames.length;\n\n      for (var i = 0; i < chunkNamesLength; i++) {\n        currentChunkName = chunkNames[i];\n        extractedValues[currentChunkName] = stateObject[currentChunkName];\n        delete stateObject[currentChunkName];\n      }\n\n      return extractedValues;\n    }\n\n    var getValuesList_accumulator = [];\n    /**\n     * @param {Object} stateObject\n     * @param {Array.<string>} chunkNames\n     *\n     * @return {Array.<number>}\n     * @private\n     */\n\n    function getValuesList(stateObject, chunkNames) {\n      getValuesList_accumulator.length = 0;\n      var chunkNamesLength = chunkNames.length;\n\n      for (var i = 0; i < chunkNamesLength; i++) {\n        getValuesList_accumulator.push(stateObject[chunkNames[i]]);\n      }\n\n      return getValuesList_accumulator;\n    }\n    /**\n     * @param {string} formatString\n     * @param {Array.<number>} rawValues\n     *\n     * @return {string}\n     * @private\n     */\n\n\n    function getFormattedValues(formatString, rawValues) {\n      var formattedValueString = formatString;\n      var rawValuesLength = rawValues.length;\n\n      for (var i = 0; i < rawValuesLength; i++) {\n        formattedValueString = formattedValueString.replace(VALUE_PLACEHOLDER, +rawValues[i].toFixed(4));\n      }\n\n      return formattedValueString;\n    }\n    /**\n     * Note: It's the duty of the caller to convert the Array elements of the\n     * return value into numbers.  This is a performance optimization.\n     *\n     * @param {string} formattedString\n     *\n     * @return {Array.<string>|null}\n     * @private\n     */\n\n\n    function getValuesFrom(formattedString) {\n      return formattedString.match(R_UNFORMATTED_VALUES);\n    }\n    /**\n     * @param {Object} easingObject\n     * @param {Object} tokenData\n     * @private\n     */\n\n\n    function expandEasingObject(easingObject, tokenData) {\n      Tweenable.each(tokenData, function (prop) {\n        var currentProp = tokenData[prop];\n        var chunkNames = currentProp.chunkNames;\n        var chunkLength = chunkNames.length;\n        var easing = easingObject[prop];\n        var i;\n\n        if (typeof easing === 'string') {\n          var easingChunks = easing.split(' ');\n          var lastEasingChunk = easingChunks[easingChunks.length - 1];\n\n          for (i = 0; i < chunkLength; i++) {\n            easingObject[chunkNames[i]] = easingChunks[i] || lastEasingChunk;\n          }\n        } else {\n          for (i = 0; i < chunkLength; i++) {\n            easingObject[chunkNames[i]] = easing;\n          }\n        }\n\n        delete easingObject[prop];\n      });\n    }\n    /**\n     * @param {Object} easingObject\n     * @param {Object} tokenData\n     * @private\n     */\n\n\n    function collapseEasingObject(easingObject, tokenData) {\n      Tweenable.each(tokenData, function (prop) {\n        var currentProp = tokenData[prop];\n        var chunkNames = currentProp.chunkNames;\n        var chunkLength = chunkNames.length;\n        var firstEasing = easingObject[chunkNames[0]];\n        var typeofEasings = typeof firstEasing;\n\n        if (typeofEasings === 'string') {\n          var composedEasingString = '';\n\n          for (var i = 0; i < chunkLength; i++) {\n            composedEasingString += ' ' + easingObject[chunkNames[i]];\n            delete easingObject[chunkNames[i]];\n          }\n\n          easingObject[prop] = composedEasingString.substr(1);\n        } else {\n          easingObject[prop] = firstEasing;\n        }\n      });\n    }\n\n    Tweenable.prototype.filter.token = {\n      'tweenCreated': function tweenCreated(currentState, fromState, toState, easingObject) {\n        sanitizeObjectForHexProps(currentState);\n        sanitizeObjectForHexProps(fromState);\n        sanitizeObjectForHexProps(toState);\n        this._tokenData = getFormatManifests(currentState);\n      },\n      'beforeTween': function beforeTween(currentState, fromState, toState, easingObject) {\n        expandEasingObject(easingObject, this._tokenData);\n        expandFormattedProperties(currentState, this._tokenData);\n        expandFormattedProperties(fromState, this._tokenData);\n        expandFormattedProperties(toState, this._tokenData);\n      },\n      'afterTween': function afterTween(currentState, fromState, toState, easingObject) {\n        collapseFormattedProperties(currentState, this._tokenData);\n        collapseFormattedProperties(fromState, this._tokenData);\n        collapseFormattedProperties(toState, this._tokenData);\n        collapseEasingObject(easingObject, this._tokenData);\n      }\n    };\n  })(Tweenable);\n}).call(null);","map":null,"metadata":{},"sourceType":"script"}