{"ast":null,"code":"import _classCallCheck from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\job\\\\web\\\\Midas\\\\Midas-Client\\\\src\\\\views\\\\import-repo\\\\import-repo.jsx\";\nimport React from 'react';\nimport Pageadmin from 'layouts/page-admin';\nimport { Button, Input } from 'reactstrap';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumn';\nimport { SheetJSFT } from './Types';\n\nvar Importrepo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Importrepo, _React$Component);\n\n  function Importrepo() {\n    var _this;\n\n    _classCallCheck(this, Importrepo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Importrepo).call(this));\n\n    _this.Click = function () {\n      var id = document.getElementById('file');\n      id.click();\n    };\n\n    _this.state = {\n      file: {},\n      data: [],\n      cols: []\n    };\n    return _this;\n  }\n\n  _createClass(Importrepo, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var _this2 = this;\n\n      var file = e.target.files[0];\n      /* Boilerplate to set up FileReader */\n\n      var reader = new FileReader();\n      var rABS = !!reader.readAsBinaryString;\n\n      reader.onload = function (e) {\n        /* Parse data */\n        var bstr = e.target.result;\n        var wb = XLSX.read(bstr, {\n          type: rABS ? 'binary' : 'array',\n          bookVBA: true\n        });\n        /* Get first worksheet */\n\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n\n        var data = XLSX.utils.sheet_to_json(ws);\n        /* Update state */\n\n        _this2.setState({\n          data: data,\n          cols: make_cols(ws['!ref'])\n        }, function () {\n          console.log(JSON.stringify(_this2.state.data, null, 2));\n        });\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Pageadmin, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"file\",\n        hidden: true,\n        id: \"file\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"button\",\n        onClick: this.Click,\n        color: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Import Repo\"));\n    }\n  }]);\n\n  return Importrepo;\n}(React.Component);\n\nexport default Importrepo;","map":{"version":3,"sources":["D:\\job\\web\\Midas\\Midas-Client\\src\\views\\import-repo\\import-repo.jsx"],"names":["React","Pageadmin","Button","Input","XLSX","make_cols","SheetJSFT","Importrepo","Click","id","document","getElementById","click","state","file","data","cols","e","target","files","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","setState","console","log","JSON","stringify","readAsArrayBuffer","handleChange","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,MAAT,EAAkBC,KAAlB,QAA+B,YAA/B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,SAA1B;;IAGMC,U;;;;;AACF,wBAAa;AAAA;;AAAA;;AACT;;AADS,UAUbC,KAVa,GAUN,YAAI;AACP,UAAIC,EAAE,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAT;AACAF,MAAAA,EAAE,CAACG,KAAH;AACH,KAbY;;AAET,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,IAAI,EAAE;AAHG,KAAb;AAFS;AAOZ;;;;iCAQYC,C,EAAG;AAAA;;AACZ,UAAMH,IAAI,GAAGG,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AAEA;;AACA,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACA,UAAMC,IAAI,GAAG,CAAC,CAACF,MAAM,CAACG,kBAAtB;;AAEAH,MAAAA,MAAM,CAACI,MAAP,GAAgB,UAACP,CAAD,EAAO;AACvB;AACA,YAAMQ,IAAI,GAAGR,CAAC,CAACC,MAAF,CAASQ,MAAtB;AACA,YAAMC,EAAE,GAAGvB,IAAI,CAACwB,IAAL,CAAUH,IAAV,EAAgB;AAAEI,UAAAA,IAAI,EAAEP,IAAI,GAAG,QAAH,GAAc,OAA1B;AAAmCQ,UAAAA,OAAO,EAAG;AAA7C,SAAhB,CAAX;AACA;;AACA,YAAMC,MAAM,GAAGJ,EAAE,CAACK,UAAH,CAAc,CAAd,CAAf;AACA,YAAMC,EAAE,GAAGN,EAAE,CAACO,MAAH,CAAUH,MAAV,CAAX;AACA;;AACA,YAAMhB,IAAI,GAAGX,IAAI,CAAC+B,KAAL,CAAWC,aAAX,CAAyBH,EAAzB,CAAb;AACA;;AACA,QAAA,MAAI,CAACI,QAAL,CAAc;AAAEtB,UAAAA,IAAI,EAAEA,IAAR;AAAcC,UAAAA,IAAI,EAAEX,SAAS,CAAC4B,EAAE,CAAC,MAAD,CAAH;AAA7B,SAAd,EAA2D,YAAM;AAC7DK,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe,MAAI,CAAC5B,KAAL,CAAWE,IAA1B,EAAgC,IAAhC,EAAsC,CAAtC,CAAZ;AACH,SAFD;AAIC,OAdD;;AAgBA,UAAIO,IAAJ,EAAU;AACVF,QAAAA,MAAM,CAACG,kBAAP,CAA0BT,IAA1B;AACC,OAFD,MAEO;AACPM,QAAAA,MAAM,CAACsB,iBAAP,CAAyB5B,IAAzB;AACC;;AAAA;AACJ;;;6BAEO;AACJ,aACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,MAAM,MAAzB;AAA0B,QAAA,EAAE,EAAC,MAA7B;AAAoC,QAAA,QAAQ,EAAE,KAAK6B,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKnC,KAApC;AAA2C,QAAA,KAAK,EAAC,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFJ,CADJ;AAMH;;;;EArDoBR,KAAK,CAAC4C,S;;AA4D/B,eAAerC,UAAf","sourcesContent":["import React from 'react';\r\nimport Pageadmin from 'layouts/page-admin';\r\nimport { Button , Input } from 'reactstrap';\r\nimport XLSX from 'xlsx';\r\nimport { make_cols } from './MakeColumn';\r\nimport { SheetJSFT } from './Types';\r\n\r\n\r\nclass Importrepo extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            file: {},\r\n            data: [],\r\n            cols: []\r\n        }\r\n    }\r\n\r\n   \r\n    Click =()=>{\r\n        let id = document.getElementById('file');\r\n        id.click();\r\n    }\r\n\r\n    handleChange(e) {\r\n        const file = e.target.files[0];\r\n        \r\n        /* Boilerplate to set up FileReader */\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n    \r\n        reader.onload = (e) => {\r\n        /* Parse data */\r\n        const bstr = e.target.result;\r\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\r\n        /* Get first worksheet */\r\n        const wsname = wb.SheetNames[0];\r\n        const ws = wb.Sheets[wsname];\r\n        /* Convert array of arrays */\r\n        const data = XLSX.utils.sheet_to_json(ws);\r\n        /* Update state */\r\n        this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\r\n            console.log(JSON.stringify(this.state.data, null, 2));\r\n        });\r\n    \r\n        };\r\n    \r\n        if (rABS) {\r\n        reader.readAsBinaryString(file);\r\n        } else {\r\n        reader.readAsArrayBuffer(file);\r\n        };\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Pageadmin>\r\n                <Input type='file' hidden id='file' onChange={this.handleChange}/>\r\n                <Button type='button' onClick={this.Click} color='default'>Import Repo</Button>\r\n            </Pageadmin>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Importrepo;"]},"metadata":{},"sourceType":"module"}